
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ActivityComment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ActivityComment
 * 
 */
export type ActivityCommentModel = runtime.Types.Result.DefaultSelection<Prisma.$ActivityCommentPayload>

export type AggregateActivityComment = {
  _count: ActivityCommentCountAggregateOutputType | null
  _min: ActivityCommentMinAggregateOutputType | null
  _max: ActivityCommentMaxAggregateOutputType | null
}

export type ActivityCommentMinAggregateOutputType = {
  id: string | null
  content: string | null
  user_ID: string | null
  activity_ID: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ActivityCommentMaxAggregateOutputType = {
  id: string | null
  content: string | null
  user_ID: string | null
  activity_ID: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ActivityCommentCountAggregateOutputType = {
  id: number
  content: number
  user_ID: number
  activity_ID: number
  created_at: number
  updated_at: number
  _all: number
}


export type ActivityCommentMinAggregateInputType = {
  id?: true
  content?: true
  user_ID?: true
  activity_ID?: true
  created_at?: true
  updated_at?: true
}

export type ActivityCommentMaxAggregateInputType = {
  id?: true
  content?: true
  user_ID?: true
  activity_ID?: true
  created_at?: true
  updated_at?: true
}

export type ActivityCommentCountAggregateInputType = {
  id?: true
  content?: true
  user_ID?: true
  activity_ID?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ActivityCommentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ActivityComment to aggregate.
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActivityComments to fetch.
   */
  orderBy?: Prisma.ActivityCommentOrderByWithRelationInput | Prisma.ActivityCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ActivityCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActivityComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActivityComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ActivityComments
  **/
  _count?: true | ActivityCommentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ActivityCommentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ActivityCommentMaxAggregateInputType
}

export type GetActivityCommentAggregateType<T extends ActivityCommentAggregateArgs> = {
      [P in keyof T & keyof AggregateActivityComment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActivityComment[P]>
    : Prisma.GetScalarType<T[P], AggregateActivityComment[P]>
}




export type ActivityCommentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActivityCommentWhereInput
  orderBy?: Prisma.ActivityCommentOrderByWithAggregationInput | Prisma.ActivityCommentOrderByWithAggregationInput[]
  by: Prisma.ActivityCommentScalarFieldEnum[] | Prisma.ActivityCommentScalarFieldEnum
  having?: Prisma.ActivityCommentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ActivityCommentCountAggregateInputType | true
  _min?: ActivityCommentMinAggregateInputType
  _max?: ActivityCommentMaxAggregateInputType
}

export type ActivityCommentGroupByOutputType = {
  id: string
  content: string
  user_ID: string
  activity_ID: string
  created_at: Date
  updated_at: Date
  _count: ActivityCommentCountAggregateOutputType | null
  _min: ActivityCommentMinAggregateOutputType | null
  _max: ActivityCommentMaxAggregateOutputType | null
}

type GetActivityCommentGroupByPayload<T extends ActivityCommentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ActivityCommentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ActivityCommentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActivityCommentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActivityCommentGroupByOutputType[P]>
      }
    >
  > 



export type ActivityCommentWhereInput = {
  AND?: Prisma.ActivityCommentWhereInput | Prisma.ActivityCommentWhereInput[]
  OR?: Prisma.ActivityCommentWhereInput[]
  NOT?: Prisma.ActivityCommentWhereInput | Prisma.ActivityCommentWhereInput[]
  id?: Prisma.StringFilter<"ActivityComment"> | string
  content?: Prisma.StringFilter<"ActivityComment"> | string
  user_ID?: Prisma.StringFilter<"ActivityComment"> | string
  activity_ID?: Prisma.StringFilter<"ActivityComment"> | string
  created_at?: Prisma.DateTimeFilter<"ActivityComment"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ActivityComment"> | Date | string
}

export type ActivityCommentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  user_ID?: Prisma.SortOrder
  activity_ID?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ActivityCommentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ActivityCommentWhereInput | Prisma.ActivityCommentWhereInput[]
  OR?: Prisma.ActivityCommentWhereInput[]
  NOT?: Prisma.ActivityCommentWhereInput | Prisma.ActivityCommentWhereInput[]
  content?: Prisma.StringFilter<"ActivityComment"> | string
  user_ID?: Prisma.StringFilter<"ActivityComment"> | string
  activity_ID?: Prisma.StringFilter<"ActivityComment"> | string
  created_at?: Prisma.DateTimeFilter<"ActivityComment"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"ActivityComment"> | Date | string
}, "id">

export type ActivityCommentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  user_ID?: Prisma.SortOrder
  activity_ID?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.ActivityCommentCountOrderByAggregateInput
  _max?: Prisma.ActivityCommentMaxOrderByAggregateInput
  _min?: Prisma.ActivityCommentMinOrderByAggregateInput
}

export type ActivityCommentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ActivityCommentScalarWhereWithAggregatesInput | Prisma.ActivityCommentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ActivityCommentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ActivityCommentScalarWhereWithAggregatesInput | Prisma.ActivityCommentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ActivityComment"> | string
  content?: Prisma.StringWithAggregatesFilter<"ActivityComment"> | string
  user_ID?: Prisma.StringWithAggregatesFilter<"ActivityComment"> | string
  activity_ID?: Prisma.StringWithAggregatesFilter<"ActivityComment"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"ActivityComment"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"ActivityComment"> | Date | string
}

export type ActivityCommentCreateInput = {
  id?: string
  content: string
  user_ID: string
  activity_ID: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ActivityCommentUncheckedCreateInput = {
  id?: string
  content: string
  user_ID: string
  activity_ID: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ActivityCommentUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  user_ID?: Prisma.StringFieldUpdateOperationsInput | string
  activity_ID?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityCommentUncheckedUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  user_ID?: Prisma.StringFieldUpdateOperationsInput | string
  activity_ID?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityCommentCreateManyInput = {
  id?: string
  content: string
  user_ID: string
  activity_ID: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ActivityCommentUpdateManyMutationInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  user_ID?: Prisma.StringFieldUpdateOperationsInput | string
  activity_ID?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityCommentUncheckedUpdateManyInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  user_ID?: Prisma.StringFieldUpdateOperationsInput | string
  activity_ID?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityCommentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  user_ID?: Prisma.SortOrder
  activity_ID?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ActivityCommentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  user_ID?: Prisma.SortOrder
  activity_ID?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ActivityCommentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  user_ID?: Prisma.SortOrder
  activity_ID?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}



export type ActivityCommentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  user_ID?: boolean
  activity_ID?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["activityComment"]>



export type ActivityCommentSelectScalar = {
  id?: boolean
  content?: boolean
  user_ID?: boolean
  activity_ID?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ActivityCommentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "user_ID" | "activity_ID" | "created_at" | "updated_at", ExtArgs["result"]["activityComment"]>

export type $ActivityCommentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ActivityComment"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    content: string
    user_ID: string
    activity_ID: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["activityComment"]>
  composites: {}
}

export type ActivityCommentGetPayload<S extends boolean | null | undefined | ActivityCommentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload, S>

export type ActivityCommentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ActivityCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ActivityCommentCountAggregateInputType | true
  }

export interface ActivityCommentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityComment'], meta: { name: 'ActivityComment' } }
  /**
   * Find zero or one ActivityComment that matches the filter.
   * @param {ActivityCommentFindUniqueArgs} args - Arguments to find a ActivityComment
   * @example
   * // Get one ActivityComment
   * const activityComment = await prisma.activityComment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActivityCommentFindUniqueArgs>(args: Prisma.SelectSubset<T, ActivityCommentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ActivityComment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActivityCommentFindUniqueOrThrowArgs} args - Arguments to find a ActivityComment
   * @example
   * // Get one ActivityComment
   * const activityComment = await prisma.activityComment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActivityCommentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ActivityCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ActivityComment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentFindFirstArgs} args - Arguments to find a ActivityComment
   * @example
   * // Get one ActivityComment
   * const activityComment = await prisma.activityComment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActivityCommentFindFirstArgs>(args?: Prisma.SelectSubset<T, ActivityCommentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ActivityComment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentFindFirstOrThrowArgs} args - Arguments to find a ActivityComment
   * @example
   * // Get one ActivityComment
   * const activityComment = await prisma.activityComment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActivityCommentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ActivityCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ActivityComments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ActivityComments
   * const activityComments = await prisma.activityComment.findMany()
   * 
   * // Get first 10 ActivityComments
   * const activityComments = await prisma.activityComment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const activityCommentWithIdOnly = await prisma.activityComment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ActivityCommentFindManyArgs>(args?: Prisma.SelectSubset<T, ActivityCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ActivityComment.
   * @param {ActivityCommentCreateArgs} args - Arguments to create a ActivityComment.
   * @example
   * // Create one ActivityComment
   * const ActivityComment = await prisma.activityComment.create({
   *   data: {
   *     // ... data to create a ActivityComment
   *   }
   * })
   * 
   */
  create<T extends ActivityCommentCreateArgs>(args: Prisma.SelectSubset<T, ActivityCommentCreateArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ActivityComments.
   * @param {ActivityCommentCreateManyArgs} args - Arguments to create many ActivityComments.
   * @example
   * // Create many ActivityComments
   * const activityComment = await prisma.activityComment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ActivityCommentCreateManyArgs>(args?: Prisma.SelectSubset<T, ActivityCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ActivityComment.
   * @param {ActivityCommentDeleteArgs} args - Arguments to delete one ActivityComment.
   * @example
   * // Delete one ActivityComment
   * const ActivityComment = await prisma.activityComment.delete({
   *   where: {
   *     // ... filter to delete one ActivityComment
   *   }
   * })
   * 
   */
  delete<T extends ActivityCommentDeleteArgs>(args: Prisma.SelectSubset<T, ActivityCommentDeleteArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ActivityComment.
   * @param {ActivityCommentUpdateArgs} args - Arguments to update one ActivityComment.
   * @example
   * // Update one ActivityComment
   * const activityComment = await prisma.activityComment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ActivityCommentUpdateArgs>(args: Prisma.SelectSubset<T, ActivityCommentUpdateArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ActivityComments.
   * @param {ActivityCommentDeleteManyArgs} args - Arguments to filter ActivityComments to delete.
   * @example
   * // Delete a few ActivityComments
   * const { count } = await prisma.activityComment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ActivityCommentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ActivityCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ActivityComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ActivityComments
   * const activityComment = await prisma.activityComment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ActivityCommentUpdateManyArgs>(args: Prisma.SelectSubset<T, ActivityCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ActivityComment.
   * @param {ActivityCommentUpsertArgs} args - Arguments to update or create a ActivityComment.
   * @example
   * // Update or create a ActivityComment
   * const activityComment = await prisma.activityComment.upsert({
   *   create: {
   *     // ... data to create a ActivityComment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ActivityComment we want to update
   *   }
   * })
   */
  upsert<T extends ActivityCommentUpsertArgs>(args: Prisma.SelectSubset<T, ActivityCommentUpsertArgs<ExtArgs>>): Prisma.Prisma__ActivityCommentClient<runtime.Types.Result.GetResult<Prisma.$ActivityCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ActivityComments that matches the filter.
   * @param {ActivityCommentFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const activityComment = await prisma.activityComment.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ActivityCommentFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a ActivityComment.
   * @param {ActivityCommentAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const activityComment = await prisma.activityComment.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ActivityCommentAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of ActivityComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentCountArgs} args - Arguments to filter ActivityComments to count.
   * @example
   * // Count the number of ActivityComments
   * const count = await prisma.activityComment.count({
   *   where: {
   *     // ... the filter for the ActivityComments we want to count
   *   }
   * })
  **/
  count<T extends ActivityCommentCountArgs>(
    args?: Prisma.Subset<T, ActivityCommentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ActivityCommentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ActivityComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ActivityCommentAggregateArgs>(args: Prisma.Subset<T, ActivityCommentAggregateArgs>): Prisma.PrismaPromise<GetActivityCommentAggregateType<T>>

  /**
   * Group by ActivityComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCommentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ActivityCommentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActivityCommentGroupByArgs['orderBy'] }
      : { orderBy?: ActivityCommentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ActivityCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ActivityComment model
 */
readonly fields: ActivityCommentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ActivityComment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActivityCommentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ActivityComment model
 */
export interface ActivityCommentFieldRefs {
  readonly id: Prisma.FieldRef<"ActivityComment", 'String'>
  readonly content: Prisma.FieldRef<"ActivityComment", 'String'>
  readonly user_ID: Prisma.FieldRef<"ActivityComment", 'String'>
  readonly activity_ID: Prisma.FieldRef<"ActivityComment", 'String'>
  readonly created_at: Prisma.FieldRef<"ActivityComment", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"ActivityComment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ActivityComment findUnique
 */
export type ActivityCommentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter, which ActivityComment to fetch.
   */
  where: Prisma.ActivityCommentWhereUniqueInput
}

/**
 * ActivityComment findUniqueOrThrow
 */
export type ActivityCommentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter, which ActivityComment to fetch.
   */
  where: Prisma.ActivityCommentWhereUniqueInput
}

/**
 * ActivityComment findFirst
 */
export type ActivityCommentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter, which ActivityComment to fetch.
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActivityComments to fetch.
   */
  orderBy?: Prisma.ActivityCommentOrderByWithRelationInput | Prisma.ActivityCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ActivityComments.
   */
  cursor?: Prisma.ActivityCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActivityComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActivityComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ActivityComments.
   */
  distinct?: Prisma.ActivityCommentScalarFieldEnum | Prisma.ActivityCommentScalarFieldEnum[]
}

/**
 * ActivityComment findFirstOrThrow
 */
export type ActivityCommentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter, which ActivityComment to fetch.
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActivityComments to fetch.
   */
  orderBy?: Prisma.ActivityCommentOrderByWithRelationInput | Prisma.ActivityCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ActivityComments.
   */
  cursor?: Prisma.ActivityCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActivityComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActivityComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ActivityComments.
   */
  distinct?: Prisma.ActivityCommentScalarFieldEnum | Prisma.ActivityCommentScalarFieldEnum[]
}

/**
 * ActivityComment findMany
 */
export type ActivityCommentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter, which ActivityComments to fetch.
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActivityComments to fetch.
   */
  orderBy?: Prisma.ActivityCommentOrderByWithRelationInput | Prisma.ActivityCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ActivityComments.
   */
  cursor?: Prisma.ActivityCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActivityComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActivityComments.
   */
  skip?: number
  distinct?: Prisma.ActivityCommentScalarFieldEnum | Prisma.ActivityCommentScalarFieldEnum[]
}

/**
 * ActivityComment create
 */
export type ActivityCommentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * The data needed to create a ActivityComment.
   */
  data: Prisma.XOR<Prisma.ActivityCommentCreateInput, Prisma.ActivityCommentUncheckedCreateInput>
}

/**
 * ActivityComment createMany
 */
export type ActivityCommentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ActivityComments.
   */
  data: Prisma.ActivityCommentCreateManyInput | Prisma.ActivityCommentCreateManyInput[]
}

/**
 * ActivityComment update
 */
export type ActivityCommentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * The data needed to update a ActivityComment.
   */
  data: Prisma.XOR<Prisma.ActivityCommentUpdateInput, Prisma.ActivityCommentUncheckedUpdateInput>
  /**
   * Choose, which ActivityComment to update.
   */
  where: Prisma.ActivityCommentWhereUniqueInput
}

/**
 * ActivityComment updateMany
 */
export type ActivityCommentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ActivityComments.
   */
  data: Prisma.XOR<Prisma.ActivityCommentUpdateManyMutationInput, Prisma.ActivityCommentUncheckedUpdateManyInput>
  /**
   * Filter which ActivityComments to update
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * Limit how many ActivityComments to update.
   */
  limit?: number
}

/**
 * ActivityComment upsert
 */
export type ActivityCommentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * The filter to search for the ActivityComment to update in case it exists.
   */
  where: Prisma.ActivityCommentWhereUniqueInput
  /**
   * In case the ActivityComment found by the `where` argument doesn't exist, create a new ActivityComment with this data.
   */
  create: Prisma.XOR<Prisma.ActivityCommentCreateInput, Prisma.ActivityCommentUncheckedCreateInput>
  /**
   * In case the ActivityComment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ActivityCommentUpdateInput, Prisma.ActivityCommentUncheckedUpdateInput>
}

/**
 * ActivityComment delete
 */
export type ActivityCommentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
  /**
   * Filter which ActivityComment to delete.
   */
  where: Prisma.ActivityCommentWhereUniqueInput
}

/**
 * ActivityComment deleteMany
 */
export type ActivityCommentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ActivityComments to delete
   */
  where?: Prisma.ActivityCommentWhereInput
  /**
   * Limit how many ActivityComments to delete.
   */
  limit?: number
}

/**
 * ActivityComment findRaw
 */
export type ActivityCommentFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ActivityComment aggregateRaw
 */
export type ActivityCommentAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ActivityComment without action
 */
export type ActivityCommentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActivityComment
   */
  select?: Prisma.ActivityCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActivityComment
   */
  omit?: Prisma.ActivityCommentOmit<ExtArgs> | null
}
